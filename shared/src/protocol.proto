syntax = "proto3";
package protocol;

message ClientHello {
	// Client version
	uint32 version = 2;   // Version of the client software
}

message ServerHelloAck {
	// Server version
	uint32 version = 1;   // Version of the server software
}

// Message representing a frame of image data
// Server -> Client
message FrameData {
	enum FrameFormat {
		RGB = 0;
		RGBA = 1;
		GRAYSCALE = 2;
	}
	bytes image_data = 1; // Raw image data in bytes
	uint32 width = 2;     // Width of the image in pixels
	uint32 height = 3;    // Height of the image in pixels
	FrameFormat format = 4;
}

// Message representing user input events
// Client -> Server
message UserInput {
	enum InputType {
		START = 0;
		STOP = 1;
		PAUSE = 2;
		RESUME = 3;
		RESET = 4;
		KEY_PRESS = 5;
		KEY_RELEASE = 6;
		MOUSE_CLICK = 7;
		MOUSE_MOVE = 8;
		MOUSE_SCROLL = 9;
		WINDOW_RESIZE = 10;
		WINDOW_MOVE = 11;
		WINDOW_CLOSE = 12;
		WINDOW_MINIMIZE = 13;
		WINDOW_MAXIMIZE = 14;
		WINDOW_RESTORE = 15;
		WINDOW_FULLSCREEN = 16;
		WINDOW_UNFULLSCREEN = 17;
		WINDOW_FOCUS = 18;
		WINDOW_UNFOCUS = 19;
		WINDOW_SHOW = 22;
		WINDOW_HIDE = 23;
	}
	InputType kind = 1;   // Type of input event
	uint32 key_code = 2;   // Key code (for keyboard events)
	int32 x = 3;          // X coordinate (for mouse events)
	int32 y = 4;          // Y coordinate (for mouse events)
	int32 delta = 5;      // Scroll delta (for mouse scroll events)
}

// Message representing status updates
// Server -> Client
// Client -> Server
message StatusUpdate {
	enum StatusType {
		INFO = 0;
		WARNING = 1;
		ERROR = 2;
		EXIT = 3;
	}
	StatusType status = 1;   // Type of status update
	string message = 2;      // Status message
	int32 code = 3;          // Status code
}

// // Service definition for gsh communication
// service GshService {
// 	// Sends a frame from server to client
// 	rpc SendFrame(FrameData) returns (StatusUpdate);

// 	// Receives user input from client to server
// 	rpc ReceiveInput(UserInput) returns (StatusUpdate);

// 	// Sends a control command from client to server
// 	rpc SendCommand(ControlCommand) returns (StatusUpdate);
// }
